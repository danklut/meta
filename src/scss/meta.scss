// Meta UI (v1.3.3)
// Meta UI is a custom base theme for the Bootstrap UI framework.

// How to use Meta UI with Sass
// To manually compile Sass using Sass, run;
// `$ sass src/styles/Custom.scss src/styles/Custom.css`


//
// Color system
//

$white:    #fff; // !default
$gray-50:  #FAFAFA;
$gray-100: #F5F5F5;
$gray-200: #EEEEEE;
$gray-300: #E0E0E0;
$gray-400: #BDBDBD;
$gray-500: #9E9E9E;
$gray-600: #757575;
$gray-700: #616161;
$gray-800: #424242;
$gray-900: #212121;
$midnight: #000;
$black:    #000; // !default

$grays: (); // !default
// stylelint-disable-next-line scss/dollar-variable-default
$grays: map-merge(
  (
    "50":  $gray-50,
    "100": $gray-100,
    "200": $gray-200,
    "300": $gray-300,
    "400": $gray-400,
    "500": $gray-500,
    "600": $gray-600,
    "700": $gray-700,
    "800": $gray-800,
    "900": $gray-900
  ),
  $grays
);

$electric-blue:           #007BFF;
$electric-magenta:        #F700D6;
$success-green:           #00BB00;
$danger-red:              #FF0000;
$warning-yellow:          #FBC02D;
$info-blue:               #1E90FF;
$red-500:                 #F44336; // Red 500
$red-600:                 #E53935; // Red 600
$pink-500:                #E91E63; // Pink 500
$pink-600:                #D81B60; // Pink 600
$purple-500:              #9C27B0; // Purple 500
$purple-600:              #8E24AA; // Purple 600
$deep-purple-500:         #673AB7; // Deep Purple 500
$deep-purple-600:         #5E35B1; // Deep Purple 600
$indigo-500:              #3F51B5; // Indigo 500
$indigo-600:              #3949AB; // Indigo 600
$blue-500:                #2196F3; // Blue 500
$blue-600:                #1E88E5; // Blue 600
$light-blue-500:          #03A9F4; // Light Blue 500
$light-blue-600:          #039BE5; // Light Blue 600
$cyan-500:                #00BCD4; // Cyan 500
$cyan-600:                #00ACC1; // Cyan 600
$teal-500:                #009688; // Teal 500
$teal-600:                #00897B; // Teal 600
$green-500:               #4CAF50; // Green 500
$green-600:               #43A047; // Green 600
$light-green-500:         #8BC34A; // Light Green 500
$light-green-600:         #7CB342; // Light Green 600
$lime-500:                #CDDC39; // Lime 500
$lime-600:                #C0CA33; // Lime 600
$yellow-500:              #FFEB3B; // Yellow 500
$yellow-600:              #FDD835; // Yellow 600
$amber-500:               #FFC107; // Amber 500
$amber-600:               #FFB300; // Amber 600
$orange-500:              #FF9800; // Orange 500
$orange-600:              #FB8C00; // Orange 600
$deep-orange-500:         #FF5722; // Deep Orange 500
$deep-orange-600:         #F4511E; // Deep Orange 600
$brown-500:               #795548; // Brown 500
$brown-600:               #6D4C41; // Brown 600
$blue-gray-500:           #607D8B; // Blue Gray 500
$blue-gray-600:           #546E7A; // Blue Gray 600

$colors: (); // !default
// stylelint-disable-next-line scss/dollar-variable-default
$colors: map-merge(
  (
    "electric-blue":      $electric-blue,
    "electric-magenta":   $electric-magenta,
    "success-green":      $success-green,
    "danger-red":         $danger-red,
    "warning-yellow":     $warning-yellow,
    "info-blue":          $info-blue,
    "red-500":            $red-500,
    "red-600":            $red-600,
    "pink-500":           $pink-500,
    "pink-600":           $pink-600,
    "purple-500":         $purple-500,
    "purple-600":         $purple-600,
    "deep-purple-500":    $deep-purple-500,
    "deep-purple-600":    $deep-purple-600,
    "indigo-500":         $indigo-500,
    "indigo-600":         $indigo-600,
    "blue-500":           $blue-500,
    "blue-600":           $blue-600,
    "light-blue-500":     $light-blue-500,
    "light-blue-600":     $light-blue-600,
    "cyan-500":           $cyan-500,
    "cyan-600":           $cyan-600,
    "teal-500":           $teal-500,
    "teal-600":           $teal-600,
    "green-500":          $green-500,
    "green-600":          $green-600,
    "light-green-500":    $light-green-500,
    "light-green-600":    $light-green-600,
    "lime-500":           $lime-500,
    "lime-600":           $lime-600,
    "yellow-500":         $yellow-500,
    "yellow-600":         $yellow-600,
    "amber-500":          $amber-500,
    "amber-600":          $amber-600,
    "orange-500":         $orange-500,
    "orange-600":         $orange-600,
    "deep-orange-500":    $deep-orange-500,
    "deep-orange-600":    $deep-orange-600,
    "brown-500":          $brown-500,
    "brown-600":          $brown-600,
    "blue-gray-500":      $blue-gray-500,
    "blue-gray-600":      $blue-gray-600
  ),
  $colors
);

$primary:       $electric-blue;
$secondary:     $electric-magenta;
$success:       $success-green;
$info:          $info-blue;
$warning:       $warning-yellow;
$danger:        $danger-red;
$light:         $gray-100; // !default
$dark:          $gray-900; // !default

$theme-colors: (); // !default
// stylelint-disable-next-line scss/dollar-variable-default
$theme-colors: map-merge(
  (
    "primary":    $primary,
    "secondary":  $secondary,
    "success":    $success,
    "info":       $info,
    "warning":    $warning,
    "danger":     $danger,
    "light":      $light,
    "dark":       $dark
  ),
  $theme-colors
);

// Set a specific jump point for requesting color jumps
$theme-color-interval:      8%; // !default

// The yiq lightness value that determines when the lightness of color changes 
// from "dark" to "light". Acceptable values are between 0 and 255.
$yiq-contrasted-threshold:  150; // !default

// Customize the light and dark text colors for use in our YIQ color contrast 
// function.
$yiq-text-dark:             $gray-900; // !default
$yiq-text-light:            $white; // !default


// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

$spacer: 1rem; // !default
$spacers: (); // !default
// stylelint-disable-next-line scss/dollar-variable-default
$spacers: map-merge(
  (
    0:  0,
    1:  ($spacer * .25),
    2:  ($spacer * .5),
    3:  $spacer,
    4:  ($spacer * 1.5),
    4b: ($spacer * 2),    // Custom value
    4c: ($spacer * 2.5),  // Custom value
    5:  ($spacer * 3),
    6:  ($spacer * 3.5),  // Custom value
    7:  ($spacer * 4),    // Custom value
    8:  ($spacer * 4.5),  // Custom value
    9:  ($spacer * 5),    // Custom value
    10: ($spacer * 5.5),  // Custom value
    11: ($spacer * 6),    // Custom value
    auto: auto            // Custom value
  ),
  $spacers
);


// Body
//
// Settings for the `<body>` element.

$body-bg:                   $black !default;
$body-color:                $gray-900 !default;


// Typography
//
// Custom typography patterns
//
// Two typographic style sets are defined.
// 1. Communication type - Sets of copy that are for written communications. 
//    (ie. promotional pages, blog posts, documentation, etc.).
// 2. Graphical UI type - Graphical user interface type within the GUI itself. 
//    (ie. List of songs, play button, settings).


// Communication Typography

// Base Typography
//

$font-size-base:                1rem; // !default
$letter-spacing:            .0.008em;
$line-height-base:               1.5; // Multiplied by the element's font-size
$font-weight-normal:             500; // default weight = Medium
$small-font-size-50:             50%; // Custom
$small-font-size-60:             60%; // Custom
$small-font-size-70:             70%; // Custom

html, body { letter-spacing: $letter-spacing; }

.small-font-size-50 { font-size: $small-font-size-50; }
.small-font-size-60 { font-size: $small-font-size-60; }
.small-font-size-70 { font-size: $small-font-size-70; }

// Links
//
// Style anchor elements.

$link-color:                $white;
$link-hover-color:          primary;
$link-hover-decoration:     none;

.underline {
  display: inline-block;
  margin-right: 4px;
  margin-left: 4px;
}

.underline:after {
  content: '';
  display: block;
  height: 2px;
  width: 100%;
  transition: width .3s ease, background-color .3s ease;
  background-color: white;
}

.underline:hover:after {
  width: 0;
  background: white;
}

// Headings
//
// Style h1, h2, h3, h4, h5, h6 elements and 
// .h1, .h2, .h3, .h4, .h5, .h6 classes.

$headings-font-weight:        700;
$headings-letter-spacing:     -0.005em;
$headings-margin-bottom:      (1.0625rem * 1.5);

// Display Headings
//
// Style .display-* heading classes.

$display-font-weight:         700;
$display1-weight:             $display-font-weight;
$display2-weight:             $display-font-weight;
$display3-weight:             $display-font-weight;
$display4-weight:             $display-font-weight;
$display-line-height:         1.05!important; // !default

// Leads
//
// Style .lead classes.

$lead-font-size:              1.3125rem;
$lead-font-weight:            400;
$lead-margin-top:             ($lead-font-size * 1.5)!important;
$lead-line-height:            1.45; 
$lead-font-size-md:           1.5rem;
$lead-font-size-lg:           1.75rem;

.lead, .lead-md, .lead-lg {
  margin-top: $lead-margin-top;
  line-height: $lead-line-height;
  font-weight: $lead-font-weight;
}

.lead-md { font-size: $lead-font-size-md; }
.lead-lg { font-size: $lead-font-size-lg; }

// Blockquotes
//
// Style blockquote elements and classes.

$blockquote-font-weight:                      400;
$blockquote-small-color:    rgba(255,255,255,0.5);
$blockquote-font-size:                  1.3125rem;

.blockquote, .blockquote-md, .blockquote-lg {
  font-weight: $blockquote-font-weight;
  line-height: $lead-line-height;
}

.blockquote-md { font-size: $lead-font-size-md; }
.blockquote-lg { font-size: $lead-font-size-lg; }

%blockquote-shared {
  display: block;
  font-size: 80%;
  color: $blockquote-small-color;

  &::before {
    content: "\2014 \00A0"; // em dash, nbsp
  }
}

.blockquote-footer-md, .blockquote-footer-lg {
  @extend %blockquote-shared;
}

// Paragraphs
//
// Style p element.

$paragraph-margin-top:        1rem!important;
$paragraph-margin-bottom:     1.0625rem!important;
$paragraph-letter-spacing:    -.015em;

p {
  letter-spacing: $paragraph-letter-spacing; // Custom Sass variable
  margin-top: $paragraph-margin-top; // Custom Sass variable
}


// Utilities

// Utilites > Text
//

// Contextual colors

.text-black-10 { color: rgba($black, .1) !important; }
.text-black-20 { color: rgba($black, .2) !important; }
.text-black-30 { color: rgba($black, .3) !important; }
.text-black-40 { color: rgba($black, .4) !important; }
.text-black-50 { color: rgba($black, .5) !important; }
.text-black-60 { color: rgba($black, .6) !important; }
.text-black-70 { color: rgba($black, .7) !important; }
.text-black-80 { color: rgba($black, .8) !important; }
.text-black-90 { color: rgba($black, .9) !important; }

.text-white-10 { color: rgba($white, .1) !important; }
.text-white-20 { color: rgba($white, .2) !important; }
.text-white-30 { color: rgba($white, .3) !important; }
.text-white-40 { color: rgba($white, .4) !important; }
.text-white-50 { color: rgba($white, .5) !important; }
.text-white-60 { color: rgba($white, .6) !important; }
.text-white-70 { color: rgba($white, .7) !important; }
.text-white-80 { color: rgba($white, .8) !important; }
.text-white-90 { color: rgba($white, .9) !important; }


// Override default variables before the import
// Import Bootstrap and its default variables

@import 'node_modules/bootstrap/scss/bootstrap.scss';


// Type Scales
//
// Create a map of pre-defined typographic scales as found on
// type-scale.com. These scales can be passed to the mixin that
// creates the font sizes by using their key from the key: value
// pairs.
//
// After the map of scales, two variables are defined.
// $heading-type-scale-base and $display-type-scale-base, these
// variables hold the initial scales that are used from a 0 width
// viewport or browser and upward. These variables accept a key 
// from the $type-scales map or can be passed a unitless value.
// 
// By default Bootstraps .display-4 font size is 1rem larger than
// the h1.  
$type-scales : (
  minor-second: 1.067,
  major-second: 1.125,
  minor-third: 1.2,
  mid-third: 1.215,
  major-third: 1.25,
  perfect-fourth: 1.333,
  augmented-fourth: 1.414,
  perfect-fifth: 1.5,
  golden-ratio: 1.618
);

$heading-type-scale-base : major-second;
$display-type-scale-base : major-second;

// Function That Checks For A Valid Type Scale Value
//
// It is important that you are not restricted to only
// the values in the map as they may not be suitable for
// your design.
//
// For this reason, the function below will check if
// the value passed to the mixin is one of the values
// set in the $type-scales map or it must be a unitless
// value to create the type scale.
@function check-type-scale-value($scale) {
  
  // Check $scale against the values in $type-scales.
  @if map-has-key($type-scales, $scale) {
    
    // If the value of $scale is defined in
    // $type-scales, return the value of $scale.
      @return map-get($type-scales, $scale);
    
  // If the value of $scale is not defined in the 
  // $type-scales map, check if the value is a number
  // and that the number is a unitless value.
  } @else if type-of($scale) == number and unitless($scale) {
    
    // If the value of $scale is a unitless number, 
    // return the number.
    @return $scale;
    
  // Lastly, should the value passed to $scale be neither
  // found in the $type-scales map nor a unitless number,
  // throw a Sass error to explain the issue.
  } @else {
    
    // Throw a Sass error if the $scale value is
    // neither found in the $type-scales map nor
    // a unitless number.
    @error "Sorry, `#{$scale}` is not a unitless number value or a pre-defined key in the $type-scales map.";
  }
  
}

// Mixins That Create Font Sizes
//
// Below are two mixin's that do very similar things.
// They both take a type scale value either from the $type-scales
// map or a custom unitless number.
//
// From there it uses the checkTypeScaleValue() function to 
// evaluate the $scale value and then create the font sizes.
@mixin create-heading-type-scale($scale) {
  
  // Check the $scale value and store in a variable to be 
  // used when calculating the font sizes.
  $the-heading-type-scale: check-type-scale-value($scale);
  
  // Starting from h6, multiply each previous value by the scale
  // to get the next font size
  $font-size-h6 : $font-size-base * $the-heading-type-scale;
  $font-size-h5 : $font-size-h6 * $the-heading-type-scale;
  $font-size-h4 : $font-size-h5 * $the-heading-type-scale;
  $font-size-h3 : $font-size-h4 * $the-heading-type-scale;
  $font-size-h2 : $font-size-h3 * $the-heading-type-scale;
  $font-size-h1 : $font-size-h2 * $the-heading-type-scale;
  // $font-size-display-base is made global to allow for accessing the 
  // varibale in the next mixin.
  $font-size-display-base : $font-size-h1 !global;
  
  // Add the created font sizes and margin-top to the elements and classes
  h1, .h1 {
    font-size: $font-size-h1; 
    margin-top: $font-size-h1 * 2.25!important;
  }
  h2, .h2 {
    font-size: $font-size-h2; 
    margin-top: $font-size-h2 * 2.25!important;
  }
  h3, .h3 {
    font-size: $font-size-h3; 
    margin-top: $font-size-h3 * 2.25!important;
  }
  h4, .h4 {
    font-size: $font-size-h4; 
    margin-top: $font-size-h4 * 2.25!important;
  }
  h5, .h5 {
    font-size: $font-size-h5; 
    margin-top: $font-size-h5 * 2.25!important;
  }
  h6, .h6 {
    font-size: $font-size-h6; 
    margin-top: $font-size-h6 * 2.25!important;
  }
}

@mixin create-display-type-scale($scale) {

  // Store default type scale in a variable for calculations
  $the-display-type-scale: check-type-scale-value($scale);
  
  // Create variables to reference the previous font size
  $font-size-display-4 : $font-size-display-base + $font-size-base;
  $font-size-display-3 : $font-size-display-4 * $the-display-type-scale;
  $font-size-display-2 : $font-size-display-3 * $the-display-type-scale;
  $font-size-display-1 : $font-size-display-2 * $the-display-type-scale;

  // Add the created font sizes to the elements and classes
  .display-4 { font-size: $font-size-display-4; }
  .display-3 { font-size: $font-size-display-3; }
  .display-2 { font-size: $font-size-display-2; }
  .display-1 { font-size: $font-size-display-1; }
}

// Create the base heading and display font sizes to be used
// from 0px width viewports and up.
// These can be adjusted through the use of media queries
// by simply using the mixin again at your desired breakpoint

// Set the root font size in px on the html element to 14px,
// so that it is 2px lower that the aprox default for browsers.
// Then the font size is bumped up 2px at the md and then lg
// breakpoints.

html {
  font-size: 15px;
  @media (min-width: 768px) {
    font-size: 16px;
  }
  @media (min-width: 992px) {
    font-size: 17px;
  }
}

// Define the heading and display font sizes
@include create-heading-type-scale($heading-type-scale-base);
@include create-display-type-scale($display-type-scale-base);

// At the Bootstrap md breakpoint, adjust the heading dont sizes.
@media (min-width: 992px) {
  @include create-heading-type-scale(minor-third);
  @include create-display-type-scale(minor-third);
}
